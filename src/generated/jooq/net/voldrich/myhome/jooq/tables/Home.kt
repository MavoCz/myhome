/*
 * This file is generated by jOOQ.
 */
package net.voldrich.myhome.jooq.tables


import java.time.LocalDateTime

import net.voldrich.myhome.jooq.Public
import net.voldrich.myhome.jooq.keys.HOME_PK
import net.voldrich.myhome.jooq.tables.records.HomeRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Home(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, HomeRecord>?,
    aliased: Table<HomeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<HomeRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.home</code>
         */
        val HOME: Home = Home()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<HomeRecord> = HomeRecord::class.java

    /**
     * The column <code>public.home.id</code>.
     */
    val ID: TableField<HomeRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.home.name</code>.
     */
    val NAME: TableField<HomeRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.home.created_on</code>.
     */
    val CREATED_ON: TableField<HomeRecord, LocalDateTime?> = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<HomeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<HomeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.home</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.home</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.home</code> table reference
     */
    constructor(): this(DSL.name("home"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, HomeRecord>): this(Internal.createPathAlias(child, key), child, key, HOME, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<HomeRecord, Long?> = super.getIdentity() as Identity<HomeRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<HomeRecord> = HOME_PK
    override fun `as`(alias: String): Home = Home(DSL.name(alias), this)
    override fun `as`(alias: Name): Home = Home(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Home = Home(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Home = Home(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, String?, LocalDateTime?> = super.fieldsRow() as Row3<Long?, String?, LocalDateTime?>
}
