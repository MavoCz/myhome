/*
 * This file is generated by jOOQ.
 */
package net.voldrich.myhome.jooq.tables


import java.time.LocalDateTime

import kotlin.collections.List

import net.voldrich.myhome.jooq.Public
import net.voldrich.myhome.jooq.keys.ACCOUNT_EMAIL_KEY
import net.voldrich.myhome.jooq.keys.ACCOUNT_PKEY
import net.voldrich.myhome.jooq.keys.ACCOUNT_USER_NAME_KEY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Account(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.account</code>
         */
        val ACCOUNT: Account = Account()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.account.user_id</code>.
     */
    val USER_ID: TableField<Record, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.account.user_name</code>.
     */
    val USER_NAME: TableField<Record, String?> = createField(DSL.name("user_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.account.password</code>.
     */
    val PASSWORD: TableField<Record, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>public.account.email</code>.
     */
    val EMAIL: TableField<Record, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.account.created_on</code>.
     */
    val CREATED_ON: TableField<Record, LocalDateTime?> = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.account</code> table reference
     */
    constructor(): this(DSL.name("account"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, ACCOUNT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<Record, Int?> = super.getIdentity() as Identity<Record, Int?>
    override fun getPrimaryKey(): UniqueKey<Record> = ACCOUNT_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(ACCOUNT_USER_NAME_KEY, ACCOUNT_EMAIL_KEY)
    override fun `as`(alias: String): Account = Account(DSL.name(alias), this)
    override fun `as`(alias: Name): Account = Account(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Account = Account(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Account = Account(name, null)
}
