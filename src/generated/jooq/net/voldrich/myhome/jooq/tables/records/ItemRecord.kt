/*
 * This file is generated by jOOQ.
 */
package net.voldrich.myhome.jooq.tables.records


import java.time.LocalDate
import java.time.LocalDateTime

import net.voldrich.myhome.jooq.tables.Item
import net.voldrich.myhome.server.api.ItemState

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record12
import org.jooq.Row12
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ItemRecord() : UpdatableRecordImpl<ItemRecord>(Item.ITEM), Record12<Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDate?, LocalDate?, ItemState?, String?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var homeId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var categoryId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    var createdByUserId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    var name: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    var description: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    var createdOn: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    var updatedOn: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    var purchasedDate: LocalDate?
        set(value): Unit = set(8, value)
        get(): LocalDate? = get(8) as LocalDate?

    var warrantyExpireDate: LocalDate?
        set(value): Unit = set(9, value)
        get(): LocalDate? = get(9) as LocalDate?

    var state: ItemState?
        set(value): Unit = set(10, value)
        get(): ItemState? = get(10) as ItemState?

    var properties: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row12<Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDate?, LocalDate?, ItemState?, String?> = super.fieldsRow() as Row12<Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDate?, LocalDate?, ItemState?, String?>
    override fun valuesRow(): Row12<Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDate?, LocalDate?, ItemState?, String?> = super.valuesRow() as Row12<Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDate?, LocalDate?, ItemState?, String?>
    override fun field1(): Field<Long?> = Item.ITEM.ID
    override fun field2(): Field<Long?> = Item.ITEM.HOME_ID
    override fun field3(): Field<Long?> = Item.ITEM.CATEGORY_ID
    override fun field4(): Field<Long?> = Item.ITEM.CREATED_BY_USER_ID
    override fun field5(): Field<String?> = Item.ITEM.NAME
    override fun field6(): Field<String?> = Item.ITEM.DESCRIPTION
    override fun field7(): Field<LocalDateTime?> = Item.ITEM.CREATED_ON
    override fun field8(): Field<LocalDateTime?> = Item.ITEM.UPDATED_ON
    override fun field9(): Field<LocalDate?> = Item.ITEM.PURCHASED_DATE
    override fun field10(): Field<LocalDate?> = Item.ITEM.WARRANTY_EXPIRE_DATE
    override fun field11(): Field<ItemState?> = Item.ITEM.STATE
    override fun field12(): Field<String?> = Item.ITEM.PROPERTIES
    override fun component1(): Long? = id
    override fun component2(): Long? = homeId
    override fun component3(): Long? = categoryId
    override fun component4(): Long? = createdByUserId
    override fun component5(): String? = name
    override fun component6(): String? = description
    override fun component7(): LocalDateTime? = createdOn
    override fun component8(): LocalDateTime? = updatedOn
    override fun component9(): LocalDate? = purchasedDate
    override fun component10(): LocalDate? = warrantyExpireDate
    override fun component11(): ItemState? = state
    override fun component12(): String? = properties
    override fun value1(): Long? = id
    override fun value2(): Long? = homeId
    override fun value3(): Long? = categoryId
    override fun value4(): Long? = createdByUserId
    override fun value5(): String? = name
    override fun value6(): String? = description
    override fun value7(): LocalDateTime? = createdOn
    override fun value8(): LocalDateTime? = updatedOn
    override fun value9(): LocalDate? = purchasedDate
    override fun value10(): LocalDate? = warrantyExpireDate
    override fun value11(): ItemState? = state
    override fun value12(): String? = properties

    override fun value1(value: Long?): ItemRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): ItemRecord {
        this.homeId = value
        return this
    }

    override fun value3(value: Long?): ItemRecord {
        this.categoryId = value
        return this
    }

    override fun value4(value: Long?): ItemRecord {
        this.createdByUserId = value
        return this
    }

    override fun value5(value: String?): ItemRecord {
        this.name = value
        return this
    }

    override fun value6(value: String?): ItemRecord {
        this.description = value
        return this
    }

    override fun value7(value: LocalDateTime?): ItemRecord {
        this.createdOn = value
        return this
    }

    override fun value8(value: LocalDateTime?): ItemRecord {
        this.updatedOn = value
        return this
    }

    override fun value9(value: LocalDate?): ItemRecord {
        this.purchasedDate = value
        return this
    }

    override fun value10(value: LocalDate?): ItemRecord {
        this.warrantyExpireDate = value
        return this
    }

    override fun value11(value: ItemState?): ItemRecord {
        this.state = value
        return this
    }

    override fun value12(value: String?): ItemRecord {
        this.properties = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Long?, value5: String?, value6: String?, value7: LocalDateTime?, value8: LocalDateTime?, value9: LocalDate?, value10: LocalDate?, value11: ItemState?, value12: String?): ItemRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        return this
    }

    /**
     * Create a detached, initialised ItemRecord
     */
    constructor(id: Long? = null, homeId: Long? = null, categoryId: Long? = null, createdByUserId: Long? = null, name: String? = null, description: String? = null, createdOn: LocalDateTime? = null, updatedOn: LocalDateTime? = null, purchasedDate: LocalDate? = null, warrantyExpireDate: LocalDate? = null, state: ItemState? = null, properties: String? = null): this() {
        this.id = id
        this.homeId = homeId
        this.categoryId = categoryId
        this.createdByUserId = createdByUserId
        this.name = name
        this.description = description
        this.createdOn = createdOn
        this.updatedOn = updatedOn
        this.purchasedDate = purchasedDate
        this.warrantyExpireDate = warrantyExpireDate
        this.state = state
        this.properties = properties
    }
}
