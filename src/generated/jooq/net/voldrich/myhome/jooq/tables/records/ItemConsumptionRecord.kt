/*
 * This file is generated by jOOQ.
 */
package net.voldrich.myhome.jooq.tables.records


import java.math.BigDecimal
import java.time.LocalDateTime

import net.voldrich.myhome.jooq.tables.ItemConsumption

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ItemConsumptionRecord() : UpdatableRecordImpl<ItemConsumptionRecord>(ItemConsumption.ITEM_CONSUMPTION), Record6<Long?, Long?, Long?, LocalDateTime?, BigDecimal?, String?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var homeId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var itemId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    var createdOn: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    var consumption: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    var units: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, Long?, Long?, LocalDateTime?, BigDecimal?, String?> = super.fieldsRow() as Row6<Long?, Long?, Long?, LocalDateTime?, BigDecimal?, String?>
    override fun valuesRow(): Row6<Long?, Long?, Long?, LocalDateTime?, BigDecimal?, String?> = super.valuesRow() as Row6<Long?, Long?, Long?, LocalDateTime?, BigDecimal?, String?>
    override fun field1(): Field<Long?> = ItemConsumption.ITEM_CONSUMPTION.ID
    override fun field2(): Field<Long?> = ItemConsumption.ITEM_CONSUMPTION.HOME_ID
    override fun field3(): Field<Long?> = ItemConsumption.ITEM_CONSUMPTION.ITEM_ID
    override fun field4(): Field<LocalDateTime?> = ItemConsumption.ITEM_CONSUMPTION.CREATED_ON
    override fun field5(): Field<BigDecimal?> = ItemConsumption.ITEM_CONSUMPTION.CONSUMPTION
    override fun field6(): Field<String?> = ItemConsumption.ITEM_CONSUMPTION.UNITS
    override fun component1(): Long? = id
    override fun component2(): Long? = homeId
    override fun component3(): Long? = itemId
    override fun component4(): LocalDateTime? = createdOn
    override fun component5(): BigDecimal? = consumption
    override fun component6(): String? = units
    override fun value1(): Long? = id
    override fun value2(): Long? = homeId
    override fun value3(): Long? = itemId
    override fun value4(): LocalDateTime? = createdOn
    override fun value5(): BigDecimal? = consumption
    override fun value6(): String? = units

    override fun value1(value: Long?): ItemConsumptionRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): ItemConsumptionRecord {
        this.homeId = value
        return this
    }

    override fun value3(value: Long?): ItemConsumptionRecord {
        this.itemId = value
        return this
    }

    override fun value4(value: LocalDateTime?): ItemConsumptionRecord {
        this.createdOn = value
        return this
    }

    override fun value5(value: BigDecimal?): ItemConsumptionRecord {
        this.consumption = value
        return this
    }

    override fun value6(value: String?): ItemConsumptionRecord {
        this.units = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: LocalDateTime?, value5: BigDecimal?, value6: String?): ItemConsumptionRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised ItemConsumptionRecord
     */
    constructor(id: Long? = null, homeId: Long? = null, itemId: Long? = null, createdOn: LocalDateTime? = null, consumption: BigDecimal? = null, units: String? = null): this() {
        this.id = id
        this.homeId = homeId
        this.itemId = itemId
        this.createdOn = createdOn
        this.consumption = consumption
        this.units = units
    }
}
