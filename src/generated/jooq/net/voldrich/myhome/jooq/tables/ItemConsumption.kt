/*
 * This file is generated by jOOQ.
 */
package net.voldrich.myhome.jooq.tables


import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import net.voldrich.myhome.jooq.Public
import net.voldrich.myhome.jooq.keys.ITEM_CONSUMPTION_PK
import net.voldrich.myhome.jooq.keys.ITEM_CONSUMPTION__ITEM_CONSUMPTION_HOME_FK
import net.voldrich.myhome.jooq.keys.ITEM_CONSUMPTION__ITEM_CONSUMPTION_ITEM_FK
import net.voldrich.myhome.jooq.tables.records.ItemConsumptionRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ItemConsumption(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ItemConsumptionRecord>?,
    aliased: Table<ItemConsumptionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ItemConsumptionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.item_consumption</code>
         */
        val ITEM_CONSUMPTION: ItemConsumption = ItemConsumption()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ItemConsumptionRecord> = ItemConsumptionRecord::class.java

    /**
     * The column <code>public.item_consumption.id</code>.
     */
    val ID: TableField<ItemConsumptionRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.item_consumption.home_id</code>.
     */
    val HOME_ID: TableField<ItemConsumptionRecord, Long?> = createField(DSL.name("home_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.item_consumption.item_id</code>.
     */
    val ITEM_ID: TableField<ItemConsumptionRecord, Long?> = createField(DSL.name("item_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.item_consumption.created_on</code>.
     */
    val CREATED_ON: TableField<ItemConsumptionRecord, LocalDateTime?> = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.item_consumption.consumption</code>.
     */
    val CONSUMPTION: TableField<ItemConsumptionRecord, BigDecimal?> = createField(DSL.name("consumption"), SQLDataType.NUMERIC, this, "")

    /**
     * The column <code>public.item_consumption.units</code>.
     */
    val UNITS: TableField<ItemConsumptionRecord, String?> = createField(DSL.name("units"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<ItemConsumptionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ItemConsumptionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.item_consumption</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.item_consumption</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.item_consumption</code> table reference
     */
    constructor(): this(DSL.name("item_consumption"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ItemConsumptionRecord>): this(Internal.createPathAlias(child, key), child, key, ITEM_CONSUMPTION, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ItemConsumptionRecord, Long?> = super.getIdentity() as Identity<ItemConsumptionRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ItemConsumptionRecord> = ITEM_CONSUMPTION_PK
    override fun getReferences(): List<ForeignKey<ItemConsumptionRecord, *>> = listOf(ITEM_CONSUMPTION__ITEM_CONSUMPTION_HOME_FK, ITEM_CONSUMPTION__ITEM_CONSUMPTION_ITEM_FK)

    private lateinit var _home: Home
    private lateinit var _item: Item

    /**
     * Get the implicit join path to the <code>public.home</code> table.
     */
    fun home(): Home {
        if (!this::_home.isInitialized)
            _home = Home(this, ITEM_CONSUMPTION__ITEM_CONSUMPTION_HOME_FK)

        return _home;
    }

    /**
     * Get the implicit join path to the <code>public.item</code> table.
     */
    fun item(): Item {
        if (!this::_item.isInitialized)
            _item = Item(this, ITEM_CONSUMPTION__ITEM_CONSUMPTION_ITEM_FK)

        return _item;
    }
    override fun `as`(alias: String): ItemConsumption = ItemConsumption(DSL.name(alias), this)
    override fun `as`(alias: Name): ItemConsumption = ItemConsumption(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ItemConsumption = ItemConsumption(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ItemConsumption = ItemConsumption(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Long?, Long?, Long?, LocalDateTime?, BigDecimal?, String?> = super.fieldsRow() as Row6<Long?, Long?, Long?, LocalDateTime?, BigDecimal?, String?>
}
