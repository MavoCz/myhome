/*
 * This file is generated by jOOQ.
 */
package net.voldrich.myhome.jooq.tables


import java.time.LocalDate
import java.time.LocalDateTime

import kotlin.collections.List

import net.voldrich.myhome.jooq.Public
import net.voldrich.myhome.jooq.keys.ITEM_PK
import net.voldrich.myhome.jooq.keys.ITEM__ITEM_CATEGORY_FK
import net.voldrich.myhome.jooq.keys.ITEM__ITEM_HOME_FK
import net.voldrich.myhome.jooq.keys.ITEM__ITEM_USER_FK
import net.voldrich.myhome.jooq.tables.records.ItemRecord
import net.voldrich.myhome.server.api.ItemState

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row12
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.EnumConverter
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Item(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ItemRecord>?,
    aliased: Table<ItemRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ItemRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.item</code>
         */
        val ITEM: Item = Item()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ItemRecord> = ItemRecord::class.java

    /**
     * The column <code>public.item.id</code>.
     */
    val ID: TableField<ItemRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.item.home_id</code>.
     */
    val HOME_ID: TableField<ItemRecord, Long?> = createField(DSL.name("home_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.item.category_id</code>.
     */
    val CATEGORY_ID: TableField<ItemRecord, Long?> = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.item.created_by_user_id</code>.
     */
    val CREATED_BY_USER_ID: TableField<ItemRecord, Long?> = createField(DSL.name("created_by_user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.item.name</code>.
     */
    val NAME: TableField<ItemRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.item.description</code>.
     */
    val DESCRIPTION: TableField<ItemRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.item.created_on</code>.
     */
    val CREATED_ON: TableField<ItemRecord, LocalDateTime?> = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.item.updated_on</code>.
     */
    val UPDATED_ON: TableField<ItemRecord, LocalDateTime?> = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.item.purchased_date</code>.
     */
    val PURCHASED_DATE: TableField<ItemRecord, LocalDate?> = createField(DSL.name("purchased_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.item.warranty_expire_date</code>.
     */
    val WARRANTY_EXPIRE_DATE: TableField<ItemRecord, LocalDate?> = createField(DSL.name("warranty_expire_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.item.state</code>.
     */
    val STATE: TableField<ItemRecord, ItemState?> = createField(DSL.name("state"), SQLDataType.VARCHAR(100), this, "", EnumConverter<String, ItemState>(String::class.java, ItemState::class.java))

    /**
     * The column <code>public.item.properties</code>.
     */
    val PROPERTIES: TableField<ItemRecord, String?> = createField(DSL.name("properties"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<ItemRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ItemRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.item</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.item</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.item</code> table reference
     */
    constructor(): this(DSL.name("item"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ItemRecord>): this(Internal.createPathAlias(child, key), child, key, ITEM, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ItemRecord, Long?> = super.getIdentity() as Identity<ItemRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ItemRecord> = ITEM_PK
    override fun getReferences(): List<ForeignKey<ItemRecord, *>> = listOf(ITEM__ITEM_HOME_FK, ITEM__ITEM_CATEGORY_FK, ITEM__ITEM_USER_FK)

    private lateinit var _home: Home
    private lateinit var _itemCategory: ItemCategory
    private lateinit var _homeUser: HomeUser

    /**
     * Get the implicit join path to the <code>public.home</code> table.
     */
    fun home(): Home {
        if (!this::_home.isInitialized)
            _home = Home(this, ITEM__ITEM_HOME_FK)

        return _home;
    }

    /**
     * Get the implicit join path to the <code>public.item_category</code>
     * table.
     */
    fun itemCategory(): ItemCategory {
        if (!this::_itemCategory.isInitialized)
            _itemCategory = ItemCategory(this, ITEM__ITEM_CATEGORY_FK)

        return _itemCategory;
    }

    /**
     * Get the implicit join path to the <code>public.home_user</code> table.
     */
    fun homeUser(): HomeUser {
        if (!this::_homeUser.isInitialized)
            _homeUser = HomeUser(this, ITEM__ITEM_USER_FK)

        return _homeUser;
    }
    override fun `as`(alias: String): Item = Item(DSL.name(alias), this)
    override fun `as`(alias: Name): Item = Item(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Item = Item(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Item = Item(name, null)

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row12<Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDate?, LocalDate?, ItemState?, String?> = super.fieldsRow() as Row12<Long?, Long?, Long?, Long?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDate?, LocalDate?, ItemState?, String?>
}
